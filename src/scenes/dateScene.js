const { Markup } = require('telegraf');
const { monthList, questions, hints, keyboards } = require('../const');

async function handleDateStep(ctx) {
  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –¥–∞—Ç—ã ‚Äî –Ω–µ –¥–≤–∏–≥–∞–µ–º —à–∞–≥!
  if (ctx.session.dateStep === 'chooseType') {
    const type = ctx.message.text;

    switch (type) {
      case 'üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É':
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –≤—ã–ª–µ—Ç–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ:', {
          reply_markup: {
            keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', request_calendar: { type: 'start' } }]],
            one_time_keyboard: true,
            resize_keyboard: true
          }
        });
        ctx.session.dateStep = 'waitCalendar';
        return; // –ù–ï –¥–≤–∏–≥–∞–µ–º —à–∞–≥!

      case 'üìÜ –£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω':
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20.08.2024 - 30.08.2024\n\n–ü—Ä–∏–º–µ—Ä: 15.07.2024 - 25.07.2024');
        ctx.session.dateStep = 'waitRange';
        return;

      case 'üóìÔ∏è –£–∫–∞–∑–∞—Ç—å –º–µ—Å—è—Ü':
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –≤—ã–ª–µ—Ç–∞:', Markup.keyboard([monthList]).oneTime().resize());
        ctx.session.dateStep = 'waitMonth';
        return;

      case '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è':
        ctx.session.answers[5] = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è';
        ctx.session.step++;
        await ctx.reply(
          `${questions[6]}\n${hints[6] || ''}`.trim(),
          keyboards[6] || Markup.removeKeyboard()
        );
        ctx.session.dateStep = null;
        return ctx.wizard.next();

      default:
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.');
        return;
    }
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  if (ctx.session.dateStep === 'waitCalendar' && ctx.message && ctx.message.calendar) {
    const dateObj = ctx.message.calendar;
    const dateStr = `${String(dateObj.day).padStart(2, '0')}.${String(dateObj.month).padStart(2, '0')}.${dateObj.year}`;

    ctx.session.answers[5] = dateStr;
    ctx.session.step++;
    await ctx.reply(
      `${questions[6]}\n${hints[6] || ''}`.trim(),
      keyboards[6] || Markup.removeKeyboard()
    );
    ctx.session.dateStep = null;
    return ctx.wizard.next();
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
  if (ctx.session.dateStep === 'waitRange') {
    const text = ctx.message.text;
    const rangeRegex = /^(\d{2}\.\d{2}\.\d{4})\s*-\s*(\d{2}\.\d{2}\.\d{4})$/;
    const match = text.match(rangeRegex);

    if (!match) {
      await ctx.reply('‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 20.08.2024 - 30.08.2024');
      return;
    }

    ctx.session.answers[5] = text;
    ctx.session.step++;
    await ctx.reply(
      `${questions[6]}\n${hints[6] || ''}`.trim(),
      keyboards[6] || Markup.removeKeyboard()
    );
    ctx.session.dateStep = null;
    return ctx.wizard.next();
  }

  // –û–∂–∏–¥–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
  if (ctx.session.dateStep === 'waitMonth') {
    const month = ctx.message.text;

    if (!monthList.includes(month)) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.');
      return;
    }

    ctx.session.answers[5] = month;
    ctx.session.step++;
    await ctx.reply(
      `${questions[6]}\n${hints[6] || ''}`.trim(),
      keyboards[6] || Markup.removeKeyboard()
    );
    ctx.session.dateStep = null;
    return ctx.wizard.next();
  }

  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.');
}

module.exports = {
  handleDateStep
}