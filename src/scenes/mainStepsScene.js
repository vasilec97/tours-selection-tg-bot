const { allowedCountries, keyboards, dateTypeKeyboard, questions, hints } = require('../const');
const { sendToBitrixAndFinish } = require('../bitrix');
const { schemas } = require('../utils/validation');

async function handleMainSteps(ctx) {
  const step = ctx.session.step || 0;
  let schema = schemas[step];

  // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–µ—Ç–µ–π
  if (step === 2) {
    const { error, value } = schema.validate(ctx.message.text);
    if (error) {
      await ctx.reply(`‚ùó ${error.message}\n${hints[step] || ''}`.trim(), keyboards[step] || undefined);
      return;
    }
    ctx.session.answers[step] = value;
    ctx.session.step++;
    // –ï—Å–ª–∏ –¥–µ—Ç–µ–π 0 ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ –≤–æ–∑—Ä–∞—Å—Ç–µ –¥–µ—Ç–µ–π
    if (parseInt(value, 10) === 0) {
      ctx.session.answers[3] = '';
      ctx.session.step++;
    }
    await ctx.reply(
      `${questions[ctx.session.step]}\n${hints[ctx.session.step] || ''}`.trim(),
      keyboards[ctx.session.step] || undefined
    );
    return;
  }

  // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ –¥–µ—Ç–µ–π (–µ—Å–ª–∏ –¥–µ—Ç–µ–π 0 ‚Äî —ç—Ç–æ—Ç —à–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω)
  if (step === 3 && ctx.session.answers[2] === 0) {
    ctx.session.step++;
    await ctx.reply(
      `${questions[ctx.session.step]}\n${hints[ctx.session.step] || ''}`.trim(),
      keyboards[ctx.session.step] || undefined
    );
    return;
  }

  // –û—Å–æ–±–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
  if (step === 4) {
    schema = schema.valid(...allowedCountries, '–î—Ä—É–≥–æ–µ').messages({
      'any.only': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–î—Ä—É–≥–æ–µ".'
    });
  }

  const { error, value } = schema.validate(ctx.message?.text);
  if (error) {
    await ctx.reply(`‚ùó ${error.message}\n${hints[step] || ''}`.trim(), keyboards[step] || undefined);
    return;
  }
  if (step === 4 && value === '–î—Ä—É–≥–æ–µ') {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–∞–Ω—É –∏–ª–∏ —Ä–µ–≥–∏–æ–Ω —Ç–µ–∫—Å—Ç–æ–º:');
    ctx.session.awaitingCustomCountry = true;
    return;
  }
  if (step === 4 && ctx.session.awaitingCustomCountry) {
    ctx.session.awaitingCustomCountry = false;
  }
  ctx.session.answers[step] = value;
  ctx.session.step++;
  if (ctx.session.step === 5) {
    await ctx.reply(
      'üõ´ –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—ã –≤—ã–ª–µ—Ç–∞?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:',
      dateTypeKeyboard
    );
    ctx.session.dateStep = 'chooseType';
    return;
  }
  if (ctx.session.step < questions.length) {
    await ctx.reply(
      `${questions[ctx.session.step]}\n${hints[ctx.session.step] || ''}`.trim(),
      keyboards[ctx.session.step] || undefined
    );
    return;
  }
  await sendToBitrixAndFinish(ctx);
}

module.exports = {
  handleMainSteps
}